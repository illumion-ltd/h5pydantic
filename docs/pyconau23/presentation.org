#+AUTHOR: Clinton Roy
#+EMAIL: clintonr@ansto.gov.au
#+TITLE: h5pydantic, from a Synchrotron through Python to HDF5
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [aspectratio=169,gray]
#+BEAMER_HEADER: \institute[ANSTO]{ANSTO\\Australian Synchrotron}
#+BEAMER_HEADER:\logo{\begin{tikzpicture}[remember picture, overlay,anchor=south east]\node at (current page.south east){\includegraphics[height=.8cm]{ANSTO.jpg}};\end{tikzpicture}}
#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+DATE: PyCon AU 2023
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_COMPILER: xelatex
#+OPTIONS: H:2

\setmainfont{BerkeleyMono-Regular.otf}

* Synchrotron

** Synchrotron
\begin{tikzpicture}[remember picture, overlay]
 \node at (current page.center){\includegraphics[width=\paperwidth]{Synch_aerial.pdf}};
\end{tikzpicture}

** Synchrotron
\begin{tikzpicture}[remember picture, overlay]
 \node at (current page.center){\includegraphics[width=\paperwidth]{Synch_inside.pdf}};
\end{tikzpicture}

** Lots of [meta]data
 * sample information
  * chemistry, volume, concentration, thickness
  * strain, temperature, shearing, magnetic, UV light, chemical, pressure
\pause
 * x-ray beam setup
  * energy 
  * distance between sample and detector
  * xray detector images
  * detector exposure time
\pause
 * calibration
  * detector images with no beam
  * detector images with beam, but no sample
  * position of beam on detector
\pause
 * processing arguments
  * different statistical methods and arguments
  * different assumptions

* HDF5

** What Users and Scientists want
 * All the data and metadata together
 * Ideally in one file


** HDF5 Files
 * One file, with internal structure
 * Archive file, think tar/zip

** HDF5 Core Concepts
#+BEAMER: \pause
 1. Groups 
   * which are basically directories/folders \pause
 1. Datasets 
  * multi dimensional arrays
  * 2D arrays commonly used to store images \pause
 1. Attributes
  * key, value metadata
  * can attach to Groups and Datasets

** Hand written, hand wavy hdf5 contents
#+BEGIN_SRC
/sample
/sample/thickness = 2.5
/sample/concentration = 3.0
/beam
/beam/energy = 1.8
/beam/distance = 7.8
/calibration
/calibration/no_beam = [0 0 0 0 1 0 0 1 0 ...]
/calibration/position/x = 247
/calibration/position/y = 253
/processing
/processing/threshold = 25
#+END_SRC

** Hand written calibration
#+BEGIN_SRC python :tangle h5py_calibration.py
import h5py

h5file = h5py.File("experiment.hdf5", "w")

calibration_group = h5file.create_group("calibration")

dataset = calibration_group.create_dataset("no_beam", 
                                           [0, 0, 0, 1, 0, 0])

position = calibration_group.create_group("position")
position.attrs["x"] = 247
position.attrs["y"] = 253
#+END_SRC

** Introducing Pydantic 
 * Groups - Model
 * Dataset - Model
 * Attributes - fields of Groups/Datasets

** Example code using h5pydantic
#+BEGIN_SRC python :tangle model.py
from h5pydantic import H5Group, H5Dataset, H5Integer32

class Position(H5Group):
    x: H5Integer32
    y: H5Integer32

class CalibImage(H5Dataset, dtype=H5Integer32, shape=(3,2)):
    pass

class Calibration(H5Group):
  no_beam: CalibImage = CalibImage()
  position: Position

class Experiment(H5Group):
    calibration: Calibration
#+END_SRC

** Using the Model
#+BEGIN_SRC python :tangle use_model.py
from model import Experiment, Calibration, CalibImage, Position

exp = Experiment(calibration=Calibration(position=Position(x=247, y=253)))
exp.calibration.no_beam.write([0, 0, 1, 0, 0])
exp.dump("experiment.hdf5")

#+END_SRC


** Extra examples showing
 * Units
 * Documentation

** History
 * COMES from AHEWEHOO
 * Users ideally want to take away one file

** The Problem

 * Worked with one of the beamline scientists to lay out the format of the of the experiment file 
 * Ended up with  wall of text that described the layout
 * But still no code
 * Had the idea of creating an ORM type library but it targets HDF rather than 
  * HDF5
 * Pydantic
 * h5pydantic
 * TODO
** weird whacky things about hdf5
 * does not have a date/time type
  * well it does, but it's deprecated for being wrong
 * pint, uncertainties
 * automatic docs

* h5pydantic

** A slide describing h5py and pydantic

*** Col left                                                       :B_Column:
   :PROPERTIES:
   :BEAMER_col: 0.3
   :BEAMER_opt: [t] 
   :END:

 h5py
  - HDF5 API \checkmark
  - imperative

*** Col middle
   :PROPERTIES:
   :BEAMER_col: 0.3
   :BEAMER_opt: [t]
   :END:
 
 h5pydantic

*** Col right                                                      :B_Column:
   :PROPERTIES:
   :BEAMER_col: 0.3
   :BEAMER_opt: [t] 
   :END:

 pydantic
  - declarative \checkmark
  
** questions
 * one raw file, multiple computational files
 * don't support references yet, could be useful
 * need to support exporting, should be a walking interface

** todo
 * need to show a h5dump output
 * need to show extended attributes, doc, units, uncertainties
 * need to show the tree structure of an example, ala the tutorial
 * overall slide, explaining what the overall design goals of
   h5pydantic is - always be saving
 * need to talk about versioning
 * need to talk about separate documentation
** Design
 * Catch errors as soon as possible
 * Catch errors before attempting to save
 * Match all data against specification
 * show hypothesis testing
 * show h5pydantic is : dataset, group, types
# Local Variables:
# org-src-preserve-indentation: t
# End:

